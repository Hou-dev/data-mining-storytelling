# -*- coding: utf-8 -*-
"""Storytelling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OXizPzzS-SZ6dId4ZAme2665IeAGTJK_
"""

from __future__ import division
import nltk
nltk.download('punkt')
nltk.download('popular')
from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
from nltk import FreqDist

storytext = open("new.txt").read()

def preprocess(sentence):
    sentence = sentence.lower()
    tokenizer = RegexpTokenizer(r'\w+')
    tokens = tokenizer.tokenize(sentence)
    return " ".join(tokens)
preprocessedStory = preprocess(storytext)
tokens = nltk.word_tokenize(preprocessedStory)
print(tokens[0:20])

def lexical_diversity(text):
    return len(set(text))/len(text)
lexical_diversity(tokens)

len(tokens)

len(set(tokens))

fdist1 = FreqDist(tokens)
print(fdist1)

fdist1.plot(50, cumulative=True)

from nltk.corpus import stopwords
stop = stopwords.words('english')
remstop = [i for i in tokens if i not in stop]
remstop[0:20]

len(remstop)

len(set(remstop))

lexical_diversity(remstop)

fdist2 = FreqDist(remstop)
print(fdist2)

fdist2.most_common(20)

fdist2.plot(50, cumulative=True)

lexical_diversity(remstop)

array = fdist2.most_common(20)
mylist = [list(i) for i in array]

import csv
with open('newfilefox.csv','w') as result:
    writer = csv.writer(result, dialect = 'excel')
    writer.writerows(array)
with open('tokensfox.csv','w') as result:
    writer = csv.writer(result, dialect = 'excel')
    writer.writerows(remstop)

from wordcloud import WordCloud
import matplotlib.pyplot as plt
wordcloud = WordCloud(max_font_size=60).generate(str(remstop))
plt.figure(figsize=(16,12))
# plot wordcloud in matplotlib
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.show()

myText = nltk.Text(remstop)
plt.figure(figsize=(16,5))
topics = ['water', 'cholera', 'disease', 'attacked', 'blood','died','cases', 'well']
myText.dispersion_plot(topics)

from nltk.sentiment.vader import SentimentIntensityAnalyzer
analyser = SentimentIntensityAnalyzer()
def sentiment_analyzer_scores(sentence):
    score = analyser.polarity_scores(sentence)
    print(str(score))
sent = sentiment_analyzer_scores(storytext)

'''positive sentiment: compound score >= 0.05
neutral sentiment: (compound score > -0.05) and (compound score < 0.05)
negative sentiment: compound score <= -0.05'''

import numpy as np
objects = ('Negative', 'Neutral', 'Positive', 'Compound')
y_pos = np.arange(len(objects))
performance = [0.1,0.839,0.061,-1]

plt.bar(y_pos, performance, align='center', alpha=0.5)
plt.xticks(y_pos, objects)
plt.ylabel('Score')
plt.title('Sentiment')

plt.show()

